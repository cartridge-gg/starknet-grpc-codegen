// AUTO-GENERATED PROTOBUF FILE. DO NOT EDIT
// Generated from Starknet JSON-RPC specification
// 
// Generation tool: https://github.com/cartridge-gg/starknet-grpc-codegen
// Generated with commit: 122730c1551d2582a99875b3b982bea8085000f8
// Specification version: 0.8.1
// Generated file: main.proto
// 
// This file contains protobuf definitions with JSON marshalling support.
// Field names preserve the exact JSON structure using json_name options.

syntax = "proto3";

package starknet.v0_8_1.main;

import "v0_8_1/common.proto";

option java_multiple_files = true;
option java_outer_classname = "StarknetProto";
option java_package = "com.starknet_v0_8_1_main";
option go_package = "github.com/cartridge-gg/starknet-grpc-codegen/go/starknet/v0_8_1/main";
option csharp_namespace = "Starknet.Starknet.V0_8_1.Main";;
option php_namespace = "Starknet\\Starknet\\V0_8_1\\Main";;

// Generated gRPC service for Starknet StarknetMainService
service StarknetMainService {
  // Returns the version of the Starknet JSON-RPC specification being used
  rpc SpecVersion(SpecVersionRequest) returns (SpecVersionResponse);
  // Get block information with transaction hashes given the block id
  rpc GetBlockWithTxHashes(GetBlockWithTxHashesRequest) returns (GetBlockWithTxHashesResponse);
  // Get block information with full transactions given the block id
  rpc GetBlockWithTxs(GetBlockWithTxsRequest) returns (GetBlockWithTxsResponse);
  // Get block information with full transactions and receipts given the block id
  rpc GetBlockWithReceipts(GetBlockWithReceiptsRequest) returns (GetBlockWithReceiptsResponse);
  // Get the information about the result of executing the requested block
  rpc GetStateUpdate(GetStateUpdateRequest) returns (GetStateUpdateResponse);
  // Get the value of the storage at the given address and key
  rpc GetStorageAt(GetStorageAtRequest) returns (GetStorageAtResponse);
  // Gets the transaction status (possibly reflecting that the tx is still in the mempool, or dropped from it)
  rpc GetTransactionStatus(GetTransactionStatusRequest) returns (GetTransactionStatusResponse);
  // Given an l1 tx hash, returns the associated l1_handler tx hashes and statuses for all L1 -> L2 messages sent by the l1 transaction, ordered by the l1 tx sending order
  rpc GetMessagesStatus(GetMessagesStatusRequest) returns (GetMessagesStatusResponse);
  // Get the details and status of a submitted transaction
  rpc GetTransactionByHash(GetTransactionByHashRequest) returns (GetTransactionByHashResponse);
  // Get the details of the transaction given by the identified block and index in that block. If no transaction is found, null is returned.
  rpc GetTransactionByBlockIdAndIndex(GetTransactionByBlockIdAndIndexRequest) returns (GetTransactionByBlockIdAndIndexResponse);
  // Get the transaction receipt by the transaction hash
  rpc GetTransactionReceipt(GetTransactionReceiptRequest) returns (GetTransactionReceiptResponse);
  // Get the contract class definition in the given block associated with the given hash
  rpc GetClass(GetClassRequest) returns (GetClassResponse);
  // Get the contract class hash in the given block for the contract deployed at the given address
  rpc GetClassHashAt(GetClassHashAtRequest) returns (GetClassHashAtResponse);
  // Get the contract class definition in the given block at the given address
  rpc GetClassAt(GetClassAtRequest) returns (GetClassAtResponse);
  // Returns the number of transactions in the designated block.
  rpc GetBlockTransactionCount(GetBlockTransactionCountRequest) returns (GetBlockTransactionCountResponse);
  // Calls a function in a contract and returns the return value.  Using this call will not create a transaction; hence, will not change the state
  rpc Call(CallRequest) returns (CallResponse);
  // Estimates the resources required by a given sequence of transactions when applied on a given state. If one of the transactions reverts or fails due to any reason (e.g. validation failure or an internal error), a TRANSACTION_EXECUTION_ERROR is returned. The estimate is given in fri.
  rpc EstimateFee(EstimateFeeRequest) returns (EstimateFeeResponse);
  // estimates the resources required by the l1_handler transaction induced by the message
  rpc EstimateMessageFee(EstimateMessageFeeRequest) returns (EstimateMessageFeeResponse);
  // Get the most recent accepted block number
  rpc BlockNumber(BlockNumberRequest) returns (BlockNumberResponse);
  // Get the most recent accepted block hash and number
  rpc BlockHashAndNumber(BlockHashAndNumberRequest) returns (BlockHashAndNumberResponse);
  // Return the currently configured Starknet chain id
  rpc ChainId(ChainIdRequest) returns (ChainIdResponse);
  // Returns an object about the sync status, or false if the node is not synching
  rpc Syncing(SyncingRequest) returns (SyncingResponse);
  // Returns all event objects matching the conditions in the provided filter
  rpc GetEvents(GetEventsRequest) returns (GetEventsResponse);
  // Get the nonce associated with the given address in the given block
  rpc GetNonce(GetNonceRequest) returns (GetNonceResponse);
  // Get merkle paths in one of the state tries: global state, classes, individual contract. A single request can query for any mix of the three types of storage proofs (classes, contracts, and storage).
  rpc GetStorageProof(GetStorageProofRequest) returns (GetStorageProofResponse);
  // Submit a new transaction to be added to the chain
  rpc AddInvokeTransaction(AddInvokeTransactionRequest) returns (AddInvokeTransactionResponse);
  // Submit a new class declaration transaction
  rpc AddDeclareTransaction(AddDeclareTransactionRequest) returns (AddDeclareTransactionResponse);
  // Submit a new deploy account transaction
  rpc AddDeployAccountTransaction(AddDeployAccountTransactionRequest) returns (AddDeployAccountTransactionResponse);
  // Simulate a given sequence of transactions on the requested state, and generate the execution traces. Note that some of the transactions may revert, in which case no error is thrown, but revert details can be seen on the returned trace object. Note that some of the transactions may revert, this will be reflected by the revert_error property in the trace. Other types of failures (e.g. unexpected error or failure in the validation phase) will result in TRANSACTION_EXECUTION_ERROR.
  rpc SimulateTransactions(SimulateTransactionsRequest) returns (SimulateTransactionsResponse);
  // Notification to the client of a new block header
  rpc SubscriptionNewHeads(SubscriptionNewHeadsRequest) returns (SubscriptionNewHeadsResponse);
  // Notification to the client of a new event
  rpc SubscriptionEvents(SubscriptionEventsRequest) returns (SubscriptionEventsResponse);
  // Notification to the client of a new transaction status
  rpc SubscriptionTransactionStatus(SubscriptionTransactionStatusRequest) returns (SubscriptionTransactionStatusResponse);
  // Notification to the client of a new pending transaction
  rpc SubscriptionPendingTransactions(SubscriptionPendingTransactionsRequest) returns (SubscriptionPendingTransactionsResponse);
  // Notifies the subscriber of a reorganization of the chain
  rpc SubscriptionReorg(SubscriptionReorgRequest) returns (SubscriptionReorgResponse);
}

