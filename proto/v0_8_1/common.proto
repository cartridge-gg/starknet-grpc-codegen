// AUTO-GENERATED PROTOBUF FILE. DO NOT EDIT
// Generated from Starknet JSON-RPC specification
// 
// Generation tool: https://github.com/cartridge-gg/starknet-grpc-codegen
// Generated with commit: 122730c1551d2582a99875b3b982bea8085000f8
// Specification version: 0.8.1
// Generated file: common.proto
// 
// This file contains protobuf definitions with JSON marshalling support.
// Field names preserve the exact JSON structure using json_name options.

syntax = "proto3";

package starknet.v0_8_1.common;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "StarknetProto";
option java_package = "com.starknet_v0_8_1_common";
option go_package = "github.com/cartridge-gg/starknet-grpc-codegen/go/starknet/v0_8_1/common";
option csharp_namespace = "Starknet.Starknet.V0_8_1.Common";;
option php_namespace = "Starknet\\Starknet\\V0_8_1\\Common";;

// The type of the transaction
enum TxnType {
  DECLARE = 0;
  DEPLOY = 1;
  DEPLOY_ACCOUNT = 2;
  INVOKE = 3;
  L1_HANDLER = 4;
}

enum EntryPointType {
  EXTERNAL = 0;
  L1_HANDLER = 1;
  CONSTRUCTOR = 2;
}

// Same as BLOCK_TAG, but without 'pending'
enum SubscriptionBlockTag {
  LATEST = 0;
}

// The finality status of the transaction
enum TxnFinalityStatus {
  ACCEPTED_ON_L2 = 0;
  ACCEPTED_ON_L1 = 1;
}

enum CallType {
  LIBRARY_CALL = 0;
  CALL = 1;
  DELEGATE = 2;
}

// The finality status of the transaction, including the case the txn is still in the mempool or failed validation during the block construction phase
enum TxnStatus {
  RECEIVED = 0;
  REJECTED = 1;
  ACCEPTED_ON_L2 = 2;
  ACCEPTED_ON_L1 = 3;
}

// A tag specifying a dynamic reference to a block
enum BlockTag {
  LATEST = 0;
  PENDING = 1;
}

enum StructAbiType {
  STRUCT = 0;
}

enum FunctionAbiType {
  FUNCTION = 0;
  L1_HANDLER = 1;
  CONSTRUCTOR = 2;
}

enum EventAbiType {
  EVENT = 0;
}

enum PriceUnit {
  WEI = 0;
  FRI = 1;
}

enum FunctionStateMutability {
  VIEW = 0;
}

enum L1DaMode {
  BLOB = 0;
  CALLDATA = 1;
}

// Flags that indicate how to simulate a given transaction. By default, the sequencer behavior is replicated locally (enough funds are expected to be in the account, and fee will be deducted from the balance before the simulation of the next transaction). To skip the fee charge, use the SKIP_FEE_CHARGE flag.
enum SimulationFlag {
  SKIP_VALIDATE = 0;
  SKIP_FEE_CHARGE = 1;
}

// The status of the block
enum BlockStatus {
  PENDING = 0;
  ACCEPTED_ON_L2 = 1;
  ACCEPTED_ON_L1 = 2;
  REJECTED = 3;
}

// Flags that indicate how to simulate a given transaction. By default, the sequencer behavior is replicated locally
enum SimulationFlagForEstimateFee {
  SKIP_VALIDATE = 0;
}

// Specifies a storage domain in Starknet. Each domain has different guarantees regarding availability
enum DaMode {
  L1 = 0;
  L2 = 1;
}

// The execution status of the transaction
enum TxnExecutionStatus {
  SUCCEEDED = 0;
  REVERTED = 1;
}

message ResourceBounds {
  // the max amount of the resource that can be used in the tx
  U64 max_amount = 1 [json_name = "max_amount"];
  // the max price per unit of this resource for this tx
  U128 max_price_per_unit = 2 [json_name = "max_price_per_unit"];
}

message NewTxnStatus {
  TxnHash transaction_hash = 1 [json_name = "transaction_hash"];
  TxnStatusResult status = 2 [json_name = "status"];
}

// a call to an l1_handler on an L2 contract induced by a message from L1
message L1HandlerTxnContent {
  // Version of the transaction scheme
  Felt version = 1 [json_name = "version"];
  string type_ = 2 [json_name = "type"];
  // The L1->L2 message nonce field of the SN Core L1 contract at the time the transaction was sent
  NumAsHex nonce = 3 [json_name = "nonce"];
  FunctionCall function_call = 4;
}

message InnerContractExecutionError {
  Address contract_address = 1 [json_name = "contract_address"];
  Felt class_hash = 2 [json_name = "class_hash"];
  Felt selector = 3 [json_name = "selector"];
  ContractExecutionError error = 4 [json_name = "error"];
}

// A transaction signature
message Signature {
  // A transaction signature
  Felt value = 1;
}

message FeeEstimate {
  // The Ethereum gas consumption of the transaction, charged for L1->L2 messages and, depending on the block's DA_MODE, state diffs
  U64 l1_gas_consumed = 1 [json_name = "l1_gas_consumed"];
  // The gas price (in wei or fri, depending on the tx version) that was used in the cost estimation
  U128 l1_gas_price = 2 [json_name = "l1_gas_price"];
  // The L2 gas consumption of the transaction
  U64 l2_gas_consumed = 3 [json_name = "l2_gas_consumed"];
  // The L2 gas price (in wei or fri, depending on the tx version) that was used in the cost estimation
  U128 l2_gas_price = 4 [json_name = "l2_gas_price"];
  // The Ethereum data gas consumption of the transaction
  U64 l1_data_gas_consumed = 5 [json_name = "l1_data_gas_consumed"];
  // The data gas price (in wei or fri, depending on the tx version) that was used in the cost estimation
  U128 l1_data_gas_price = 6 [json_name = "l1_data_gas_price"];
  // The estimated fee for the transaction (in wei or fri, depending on the tx version), equals to l1_gas_consumed*l1_gas_price + l1_data_gas_consumed*l1_data_gas_price + l2_gas_consumed*l2_gas_price
  U128 overall_fee = 7 [json_name = "overall_fee"];
  // units in which the fee is given
  PriceUnit unit = 8 [json_name = "unit"];
}

message TxnReceipt {
  oneof value {
    InvokeTxnReceipt variant_1 = 1;
    L1HandlerTxnReceipt variant_2 = 2;
    DeclareTxnReceipt variant_3 = 3;
    DeployTxnReceipt variant_4 = 4;
    DeployAccountTxnReceipt variant_5 = 5;
  }
}

// a message alongside its order within the transaction
message OrderedMessage {
  // the order of the message within the transaction
  int64 order = 1 [json_name = "order"];
  MsgToL1 msg_to_l1 = 2;
}

// invokes a specific function in the desired contract (not necessarily an account)
message InvokeTxnV0 {
  TxnHash transaction_hash = 1 [json_name = "transaction_hash"];
  InvokeTxnV0Content invoke_txn_v0_content = 2;
}

message EntryPointsByType {
  SierraEntryPoint constructor = 1 [json_name = "CONSTRUCTOR"];
  SierraEntryPoint external = 2 [json_name = "EXTERNAL"];
  SierraEntryPoint l1_handler = 3 [json_name = "L1_HANDLER"];
}

message DeprecatedCairoEntryPoint {
  // The offset of the entry point in the program
  NumAsHex offset = 1 [json_name = "offset"];
  // A unique identifier of the entry point (function) in the program
  Felt selector = 2 [json_name = "selector"];
}

// An identifier for this subscription stream used to associate events with this subscription.
message SubscriptionId {
  // An identifier for this subscription stream used to associate events with this subscription.
  string value = 1;
}

message DeclareTxnV1Content {
  string type_ = 1 [json_name = "type"];
  // The address of the account contract sending the declaration transaction
  Address sender_address = 2 [json_name = "sender_address"];
  // The maximal fee that can be charged for including the transaction
  Felt max_fee = 3 [json_name = "max_fee"];
  // Version of the transaction scheme
  NumAsHex version = 4 [json_name = "version"];
  Signature signature = 5 [json_name = "signature"];
  Felt nonce = 6 [json_name = "nonce"];
  // The hash of the declared class
  Felt class_hash = 7 [json_name = "class_hash"];
}

// Initiate a transaction from an account
message InvokeTxn {
  oneof value {
    InvokeTxnV0 variant_1 = 1;
    InvokeTxnV1 variant_2 = 2;
    InvokeTxnV3 variant_3 = 3;
  }
}

// 64 bit integers, represented by hex string of length at most 16
message U64 {
  // 64 bit integers, represented by hex string of length at most 16
  string value = 1;
}

// Either a tranasaction hash or full transaction details, based on subscription
message TxnOrHash {
  oneof value {
    TxnHash variant_1 = 1;
    Txn variant_2 = 2;
  }
}

// Starknet chain id, given in hex representation.
message ChainId {
  // Starknet chain id, given in hex representation.
  string value = 1;
}

// The change in state applied in this block, given as a mapping of addresses to the new values and/or new contracts
message StateDiff {
  ContractStorageDiffItem storage_diffs = 1 [json_name = "storage_diffs"];
  Felt deprecated_declared_classes = 2 [json_name = "deprecated_declared_classes"];
  DeclaredClassItem declared_classes = 3 [json_name = "declared_classes"];
  DeployedContractItem deployed_contracts = 4 [json_name = "deployed_contracts"];
  ReplacedClassItem replaced_classes = 5 [json_name = "replaced_classes"];
  NonceUpdate nonces = 6 [json_name = "nonces"];
}

message GlobalRoots {
  Felt contracts_tree_root = 1 [json_name = "contracts_tree_root"];
  Felt classes_tree_root = 2 [json_name = "classes_tree_root"];
  // the associated block hash (needed in case the caller used a block tag for the block_id parameter)
  Felt block_hash = 3 [json_name = "block_hash"];
}

// The transaction schema, as it appears inside a block
message Txn {
  oneof value {
    InvokeTxn variant_1 = 1;
    L1HandlerTxn variant_2 = 2;
    DeclareTxn variant_3 = 3;
    DeployTxn variant_4 = 4;
    DeployAccountTxn variant_5 = 5;
  }
}

message ResultPageRequest {
  // The token returned from the previous query. If no token is provided the first page is returned.
  optional string continuation_token = 1 [json_name = "continuation_token"];
  int64 chunk_size = 2 [json_name = "chunk_size"];
}

message SierraContractClass {
  // The list of Sierra instructions of which the program consists
  Felt sierra_program = 1 [json_name = "sierra_program"];
  // The version of the contract class object. Currently, the Starknet OS supports version 0.1.0
  string contract_class_version = 2 [json_name = "contract_class_version"];
  EntryPointsByType entry_points_by_type = 3 [json_name = "entry_points_by_type"];
  // The class ABI, as supplied by the user declaring the class
  string abi = 4 [json_name = "abi"];
}

// deploys a new account contract
message DeployAccountTxnContent {
  oneof value {
    DeployAccountTxnV1Content variant_1 = 1;
    DeployAccountTxnV3Content variant_2 = 2;
  }
}

// Deploys an account contract, charges fee from the pre-funded account addresses
message DeployAccountTxnV3Content {
  string type_ = 1 [json_name = "type"];
  // Version of the transaction scheme
  NumAsHex version = 2 [json_name = "version"];
  Signature signature = 3 [json_name = "signature"];
  Felt nonce = 4 [json_name = "nonce"];
  // The salt for the address of the deployed contract
  Felt contract_address_salt = 5 [json_name = "contract_address_salt"];
  // The parameters passed to the constructor
  Felt constructor_calldata = 6 [json_name = "constructor_calldata"];
  // The hash of the deployed contract's class
  Felt class_hash = 7 [json_name = "class_hash"];
  // resource bounds for the transaction execution
  ResourceBoundsMapping resource_bounds = 8 [json_name = "resource_bounds"];
  // the tip for the transaction
  U64 tip = 9 [json_name = "tip"];
  // data needed to allow the paymaster to pay for the transaction in native tokens
  Felt paymaster_data = 10 [json_name = "paymaster_data"];
  // The storage domain of the account's nonce (an account has a nonce per DA mode)
  DaMode nonce_data_availability_mode = 11 [json_name = "nonce_data_availability_mode"];
  // The storage domain of the account's balance from which fee will be charged
  DaMode fee_data_availability_mode = 12 [json_name = "fee_data_availability_mode"];
}

// The list of contracts whose class was replaced
message ReplacedClassItem {
  // The address of the contract whose class was replaced
  Address contract_address = 1 [json_name = "contract_address"];
  // The new class hash
  Felt class_hash = 2 [json_name = "class_hash"];
}

// Deploys an account contract, charges fee from the pre-funded account addresses
message DeployAccountTxnV1Content {
  string type_ = 1 [json_name = "type"];
  // The maximal fee that can be charged for including the transaction
  Felt max_fee = 2 [json_name = "max_fee"];
  // Version of the transaction scheme
  NumAsHex version = 3 [json_name = "version"];
  Signature signature = 4 [json_name = "signature"];
  Felt nonce = 5 [json_name = "nonce"];
  // The salt for the address of the deployed contract
  Felt contract_address_salt = 6 [json_name = "contract_address_salt"];
  // The parameters passed to the constructor
  Felt constructor_calldata = 7 [json_name = "constructor_calldata"];
  // The hash of the deployed contract's class
  Felt class_hash = 8 [json_name = "class_hash"];
}

message BlockBodyWithTxHashes {
  // The hashes of the transactions included in this block
  TxnHash transactions = 1 [json_name = "transactions"];
}

// invokes a specific function in the desired contract (not necessarily an account)
message InvokeTxnV0Content {
  string type_ = 1 [json_name = "type"];
  // The maximal fee that can be charged for including the transaction
  Felt max_fee = 2 [json_name = "max_fee"];
  // Version of the transaction scheme
  NumAsHex version = 3 [json_name = "version"];
  Signature signature = 4 [json_name = "signature"];
  Address contract_address = 5 [json_name = "contract_address"];
  Felt entry_point_selector = 6 [json_name = "entry_point_selector"];
  // The parameters passed to the function
  Felt calldata = 7 [json_name = "calldata"];
}

message ResourcePrice {
  // the price of one unit of the given resource, denominated in fri (10^-18 strk)
  Felt price_in_fri = 1 [json_name = "price_in_fri"];
  // the price of one unit of the given resource, denominated in wei
  Felt price_in_wei = 2 [json_name = "price_in_wei"];
}

message ExecutionResult {
  oneof value {
    // Common properties for a transaction receipt that was executed successfully
    Object variant_1 = 1;
    // Common properties for a transaction receipt that was reverted
    Object variant_2 = 2;
  }
}

// structured error that can later be processed by wallets or sdks
message ContractExecutionError {
  oneof value {
    InnerContractExecutionError variant_1 = 1;
    // the error raised during execution
    string variant_2 = 2;
  }
}

// The declared class hash and compiled class hash
message DeclaredClassItem {
  // The hash of the declared class
  Felt class_hash = 1 [json_name = "class_hash"];
  // The Cairo assembly hash corresponding to the declared class
  Felt compiled_class_hash = 2 [json_name = "compiled_class_hash"];
}

// The transaction schema, as it appears inside a block
message TxnContent {
  oneof value {
    InvokeTxnContent variant_1 = 1;
    L1HandlerTxnContent variant_2 = 2;
    DeclareTxnContent variant_3 = 3;
    DeployTxnContent variant_4 = 4;
    DeployAccountTxnContent variant_5 = 5;
  }
}

// The content of an event
message EventContent {
  Felt keys = 1 [json_name = "keys"];
  Felt data = 2 [json_name = "data"];
}

// An event filter/query
message EventFilter {
  optional BlockId from_block = 1 [json_name = "from_block"];
  optional BlockId to_block = 2 [json_name = "to_block"];
  optional Address address = 3 [json_name = "address"];
  // The keys to filter over
  optional EventKeys keys = 4 [json_name = "keys"];
}

// Declare Contract Transaction V0
message DeclareTxnV0 {
  TxnHash transaction_hash = 1 [json_name = "transaction_hash"];
  DeclareTxnV0Content declare_txn_v0_content = 2;
}

message DeclareTxnReceipt {
  string type_ = 1 [json_name = "type"];
  CommonReceiptProperties common_receipt_properties = 2;
}

// The structure of a deploy transaction. Note that this transaction type is deprecated and will no longer be supported in future versions
message DeployTxn {
  TxnHash transaction_hash = 1 [json_name = "transaction_hash"];
  DeployTxnContent deploy_txn_content = 2;
}

// an internal node whose both children are non-zero
message BinaryNode {
  // the hash of the left child
  Felt left = 1 [json_name = "left"];
  // the hash of the right child
  Felt right = 2 [json_name = "right"];
}

// The block object
message BlockWithTxHashes {
  BlockStatus status = 1 [json_name = "status"];
  BlockHeader block_header = 2;
  BlockBodyWithTxHashes block_body_with_tx_hashes = 3;
}

message DeclareTxnV0Content {
  string type_ = 1 [json_name = "type"];
  // The address of the account contract sending the declaration transaction
  Address sender_address = 2 [json_name = "sender_address"];
  // The maximal fee that can be charged for including the transaction
  Felt max_fee = 3 [json_name = "max_fee"];
  // Version of the transaction scheme
  NumAsHex version = 4 [json_name = "version"];
  Signature signature = 5 [json_name = "signature"];
  // The hash of the declared class
  Felt class_hash = 6 [json_name = "class_hash"];
}

message SierraEntryPoint {
  // A unique identifier of the entry point (function) in the program
  Felt selector = 1 [json_name = "selector"];
  // The index of the function in the program
  int64 function_idx = 2 [json_name = "function_idx"];
}

message ReceiptBlock {
  // If this field is missing, it means the receipt belongs to the pending block
  optional BlockHash block_hash = 1 [json_name = "block_hash"];
  // If this field is missing, it means the receipt belongs to the pending block
  optional BlockNumber block_number = 2 [json_name = "block_number"];
}

// Broadcasted declare Contract Transaction V3
message BroadcastedDeclareTxnV3 {
  string type_ = 1 [json_name = "type"];
  // The address of the account contract sending the declaration transaction
  Address sender_address = 2 [json_name = "sender_address"];
  // The hash of the Cairo assembly resulting from the Sierra compilation
  Felt compiled_class_hash = 3 [json_name = "compiled_class_hash"];
  // Version of the transaction scheme
  NumAsHex version = 4 [json_name = "version"];
  Signature signature = 5 [json_name = "signature"];
  Felt nonce = 6 [json_name = "nonce"];
  // The class to be declared
  SierraContractClass contract_class = 7 [json_name = "contract_class"];
  // resource bounds for the transaction execution
  ResourceBoundsMapping resource_bounds = 8 [json_name = "resource_bounds"];
  // the tip for the transaction
  U64 tip = 9 [json_name = "tip"];
  // data needed to allow the paymaster to pay for the transaction in native tokens
  Felt paymaster_data = 10 [json_name = "paymaster_data"];
  // data needed to deploy the account contract from which this tx will be initiated
  Felt account_deployment_data = 11 [json_name = "account_deployment_data"];
  // The storage domain of the account's nonce (an account has a nonce per DA mode)
  DaMode nonce_data_availability_mode = 12 [json_name = "nonce_data_availability_mode"];
  // The storage domain of the account's balance from which fee will be charged
  DaMode fee_data_availability_mode = 13 [json_name = "fee_data_availability_mode"];
}

// An object describing the node synchronization status
message SyncStatus {
  // The hash of the block from which the sync started
  BlockHash starting_block_hash = 1 [json_name = "starting_block_hash"];
  // The number (height) of the block from which the sync started
  BlockNumber starting_block_num = 2 [json_name = "starting_block_num"];
  // The hash of the current block being synchronized
  BlockHash current_block_hash = 3 [json_name = "current_block_hash"];
  // The number (height) of the current block being synchronized
  BlockNumber current_block_num = 4 [json_name = "current_block_num"];
  // The hash of the estimated highest block to be synchronized
  BlockHash highest_block_hash = 5 [json_name = "highest_block_hash"];
  // The number (height) of the estimated highest block to be synchronized
  BlockNumber highest_block_num = 6 [json_name = "highest_block_num"];
}

// A storage key. Represented as up to 62 hex digits, 3 bits, and 5 leading zeroes.
message StorageKey {
  // A storage key. Represented as up to 62 hex digits, 3 bits, and 5 leading zeroes.
  string value = 1;
}

// Declare Contract Transaction V1
message DeclareTxnV1 {
  TxnHash transaction_hash = 1 [json_name = "transaction_hash"];
  DeclareTxnV1Content declare_txn_v1_content = 2;
}

message DeployTxnContent {
  // Version of the transaction scheme
  Felt version = 1 [json_name = "version"];
  string type_ = 2 [json_name = "type"];
  // The salt for the address of the deployed contract
  Felt contract_address_salt = 3 [json_name = "contract_address_salt"];
  // The parameters passed to the constructor
  Felt constructor_calldata = 4 [json_name = "constructor_calldata"];
  // The hash of the deployed contract's class
  Felt class_hash = 5 [json_name = "class_hash"];
}

message MsgToL1 {
  // The address of the L2 contract sending the message
  Felt from_address = 1 [json_name = "from_address"];
  // The target L1 address the message is sent to
  Felt to_address = 2 [json_name = "to_address"];
  // The payload of the message
  Felt payload = 3 [json_name = "payload"];
}

message StructAbiEntry {
  StructAbiType type_ = 1 [json_name = "type"];
  // The struct name
  string name = 2 [json_name = "name"];
  int64 size = 3 [json_name = "size"];
  StructMember members = 4 [json_name = "members"];
}

// 128 bit integers, represented by hex string of length at most 32
message U128 {
  // 128 bit integers, represented by hex string of length at most 32
  string value = 1;
}

// The updated nonce per contract address
message NonceUpdate {
  // The address of the contract
  Address contract_address = 1 [json_name = "contract_address"];
  // The nonce for the given address at the end of the block
  Felt nonce = 2 [json_name = "nonce"];
}

message TxnWithReceipt {
  TxnContent transaction = 1 [json_name = "transaction"];
  TxnReceipt receipt = 2 [json_name = "receipt"];
}

// The block object
message BlockWithReceipts {
  BlockStatus status = 1 [json_name = "status"];
  BlockHeader block_header = 2;
  BlockBodyWithReceipts block_body_with_receipts = 3;
}

message TxnStatusResult {
  TxnStatus finality_status = 1 [json_name = "finality_status"];
  optional TxnExecutionStatus execution_status = 2 [json_name = "execution_status"];
  // the failure reason, only appears if finality_status is REJECTED or execution_status is REVERTED
  optional string failure_reason = 3 [json_name = "failure_reason"];
}

message DeprecatedEntryPointsByType {
  DeprecatedCairoEntryPoint constructor = 1 [json_name = "CONSTRUCTOR"];
  DeprecatedCairoEntryPoint external = 2 [json_name = "EXTERNAL"];
  DeprecatedCairoEntryPoint l1_handler = 3 [json_name = "L1_HANDLER"];
}

// the execution trace of an L1 handler transaction
message L1HandlerTxnTrace {
  // the trace of the __execute__ call or constructor call, depending on the transaction type (none for declare transactions)
  FunctionInvocation function_invocation = 1 [json_name = "function_invocation"];
  // the state diffs induced by the transaction
  optional StateDiff state_diff = 2 [json_name = "state_diff"];
  // the resources consumed by the transaction, includes both computation and data
  ExecutionResources execution_resources = 3 [json_name = "execution_resources"];
  string type_ = 4 [json_name = "type"];
}

message FunctionInvocation {
  FunctionCall function_call = 1;
  // The address of the invoking contract. 0 for the root invocation
  Felt caller_address = 2 [json_name = "caller_address"];
  // The hash of the class being called
  Felt class_hash = 3 [json_name = "class_hash"];
  EntryPointType entry_point_type = 4 [json_name = "entry_point_type"];
  CallType call_type = 5 [json_name = "call_type"];
  // The value returned from the function invocation
  Felt result = 6 [json_name = "result"];
  // The calls made by this invocation
  NestedCall calls = 7 [json_name = "calls"];
  // The events emitted in this invocation
  OrderedEvent events = 8 [json_name = "events"];
  // The messages sent by this invocation to L1
  OrderedMessage messages = 9 [json_name = "messages"];
  // Resources consumed by the call tree rooted at this given call (including the root)
  InnerCallExecutionResources execution_resources = 10 [json_name = "execution_resources"];
  // true if this inner call panicked
  bool is_reverted = 11 [json_name = "is_reverted"];
}

// an event alongside its order within the transaction
message OrderedEvent {
  // the order of the event within the transaction
  int64 order = 1 [json_name = "order"];
  EventContent event_content = 2;
}

message BlockHeader {
  BlockHash block_hash = 1 [json_name = "block_hash"];
  // The hash of this block's parent
  BlockHash parent_hash = 2 [json_name = "parent_hash"];
  // The block number (its height)
  BlockNumber block_number = 3 [json_name = "block_number"];
  // The new global state root
  Felt new_root = 4 [json_name = "new_root"];
  // The time in which the block was created, encoded in Unix time
  int64 timestamp = 5 [json_name = "timestamp"];
  // The Starknet identity of the sequencer submitting this block
  Felt sequencer_address = 6 [json_name = "sequencer_address"];
  // The price of l1 gas in the block
  ResourcePrice l1_gas_price = 7 [json_name = "l1_gas_price"];
  // The price of l2 gas in the block
  ResourcePrice l2_gas_price = 8 [json_name = "l2_gas_price"];
  // The price of l1 data gas in the block
  ResourcePrice l1_data_gas_price = 9 [json_name = "l1_data_gas_price"];
  // specifies whether the data of this block is published via blob data or calldata
  L1DaMode l1_da_mode = 10 [json_name = "l1_da_mode"];
  // Semver of the current Starknet protocol
  string starknet_version = 11 [json_name = "starknet_version"];
}

// the execution trace of an invoke transaction
message InvokeTxnTrace {
  optional FunctionInvocation validate_invocation = 1 [json_name = "validate_invocation"];
  ExecuteInvocation execute_invocation = 2 [json_name = "execute_invocation"];
  optional FunctionInvocation fee_transfer_invocation = 3 [json_name = "fee_transfer_invocation"];
  // the state diffs induced by the transaction
  optional StateDiff state_diff = 4 [json_name = "state_diff"];
  // the resources consumed by the transaction, includes both computation and data
  ExecutionResources execution_resources = 5 [json_name = "execution_resources"];
  string type_ = 6 [json_name = "type"];
}

// Block hash, number or tag
message BlockId {
  oneof value {
    Object variant_1 = 1;
    Object variant_2 = 2;
    BlockTag variant_3 = 3;
  }
}

// Data about reorganized blocks, starting and ending block number and hash
message ReorgData {
  // Hash of the first known block of the orphaned chain
  BlockHash starting_block_hash = 1 [json_name = "starting_block_hash"];
  // Number of the first known block of the orphaned chain
  BlockNumber starting_block_number = 2 [json_name = "starting_block_number"];
  // The last known block of the orphaned chain
  BlockHash ending_block_hash = 3 [json_name = "ending_block_hash"];
  // Number of the last known block of the orphaned chain
  BlockNumber ending_block_number = 4 [json_name = "ending_block_number"];
}

// A single pair of transaction hash and corresponding trace
message TransactionTraceWithHash {
  Felt transaction_hash = 1 [json_name = "transaction_hash"];
  TransactionTrace trace_root = 2 [json_name = "trace_root"];
}

message TransactionTrace {
  oneof value {
  }
}

// The dynamic block being constructed by the sequencer. Note that this object will be deprecated upon decentralization.
message PendingBlockWithTxs {
  BlockBodyWithTxs block_body_with_txs = 1;
  PendingBlockHeader pending_block_header = 2;
}

// fee payment info as it appears in receipts
message FeePayment {
  // amount paid
  Felt amount = 1 [json_name = "amount"];
  // units in which the fee is given
  PriceUnit unit = 2 [json_name = "unit"];
}

// Function call information
message FunctionCall {
  Address contract_address = 1 [json_name = "contract_address"];
  Felt entry_point_selector = 2 [json_name = "entry_point_selector"];
  // The parameters passed to the function
  Felt calldata = 3 [json_name = "calldata"];
}

// the resources consumed by the transaction
message ExecutionResources {
  // l1 gas consumed by this transaction, used for l2-->l1 messages and state updates if blobs are not used
  int64 l1_gas = 1 [json_name = "l1_gas"];
  // data gas consumed by this transaction, 0 if blobs are not used
  int64 l1_data_gas = 2 [json_name = "l1_data_gas"];
  // l2 gas consumed by this transaction, used for computation and calldata
  int64 l2_gas = 3 [json_name = "l2_gas"];
}

message DeployAccountTxnReceipt {
  CommonReceiptProperties common_receipt_properties = 1;
  string type_ = 2 [json_name = "type"];
  // The address of the deployed contract
  Felt contract_address = 3 [json_name = "contract_address"];
}

// Deploys an account contract, charges fee from the pre-funded account addresses
message DeployAccountTxnV3 {
  TxnHash transaction_hash = 1 [json_name = "transaction_hash"];
  DeployAccountTxnV3Content deploy_account_txn_v3_content = 2;
}

// More data about the execution failure
message TransactionExecutionErrorData {
  // The index of the first transaction failing in a sequence of given transactions
  int64 transaction_index = 1 [json_name = "transaction_index"];
  // the execution trace up to the point of failure
  ContractExecutionError execution_error = 2 [json_name = "execution_error"];
}

// initiates a transaction from a given account
message InvokeTxnV1 {
  TxnHash transaction_hash = 1 [json_name = "transaction_hash"];
  InvokeTxnV1Content invoke_txn_v1_content = 2;
}

// More data about the execution failure
message ContractErrorData {
  // the execution trace up to the point of failure
  ContractExecutionError revert_error = 1 [json_name = "revert_error"];
}

message EventAbiEntry {
  EventAbiType type_ = 1 [json_name = "type"];
  // The event name
  string name = 2 [json_name = "name"];
  TypedParameter keys = 3 [json_name = "keys"];
  TypedParameter data = 4 [json_name = "data"];
}

message StorageEntry {
  // The key of the changed value
  Felt key = 1 [json_name = "key"];
  // The new value applied to the given address
  Felt value = 2 [json_name = "value"];
}

message ContractStorageKeys {
  Address contract_address = 1 [json_name = "contract_address"];
  Felt storage_keys = 2 [json_name = "storage_keys"];
}

// The dynamic block being constructed by the sequencer. Note that this object will be deprecated upon decentralization.
message PendingBlockWithReceipts {
  BlockBodyWithReceipts block_body_with_receipts = 1;
  PendingBlockHeader pending_block_header = 2;
}

// receipt for l1 handler transaction
message L1HandlerTxnReceipt {
  string type_ = 1 [json_name = "type"];
  // The message hash as it appears on the L1 core contract
  Hash256 message_hash = 2 [json_name = "message_hash"];
  CommonReceiptProperties common_receipt_properties = 3;
}

message EventsChunk {
  EmittedEvent events = 1 [json_name = "events"];
  // Use this token in a subsequent query to obtain the next page. Should not appear if there are no more pages.
  optional string continuation_token = 2 [json_name = "continuation_token"];
}

// The definition of a Starknet contract class
message DeprecatedContractClass {
  // A base64 representation of the compressed program code
  string program = 1 [json_name = "program"];
  DeprecatedEntryPointsByType entry_points_by_type = 2 [json_name = "entry_points_by_type"];
  optional ContractAbi abi = 3 [json_name = "abi"];
}

// a node_hash -> node mapping of all the nodes in the union of the paths between the requested leaves and the root
message NodeHashToNodeMapping {
  // a node_hash -> node mapping of all the nodes in the union of the paths between the requested leaves and the root
  Object value = 1;
}

// a call to an l1_handler on an L2 contract induced by a message from L1
message L1HandlerTxn {
  TxnHash transaction_hash = 1 [json_name = "transaction_hash"];
  L1HandlerTxnContent l1_handler_txn_content = 2;
}

// The keys to filter over
message EventKeys {
  // The keys to filter over
  Felt value = 1;
}

// The dynamic block being constructed by the sequencer. Note that this object will be deprecated upon decentralization.
message PendingBlockWithTxHashes {
  BlockBodyWithTxHashes block_body_with_tx_hashes = 1;
  PendingBlockHeader pending_block_header = 2;
}

// Deploys an account contract, charges fee from the pre-funded account addresses
message DeployAccountTxnV1 {
  TxnHash transaction_hash = 1 [json_name = "transaction_hash"];
  DeployAccountTxnV1Content deploy_account_txn_v1_content = 2;
}

// Block hash, number or tag
message ConfirmedBlockId {
  oneof value {
    Object variant_1 = 1;
    Object variant_2 = 2;
    // A tag specifying a dynamic reference to a block
    string variant_3 = 3;
  }
}

message ContractStorageDiffItem {
  // The contract address for which the storage changed
  Felt address = 1 [json_name = "address"];
  // The changes in the storage of the contract
  StorageEntry storage_entries = 2 [json_name = "storage_entries"];
}

// Declare Contract Transaction V3
message DeclareTxnV3 {
  TxnHash transaction_hash = 1 [json_name = "transaction_hash"];
  DeclareTxnV3Content declare_txn_v3_content = 2;
}

message DeclareTxnContent {
  oneof value {
    DeclareTxnV0Content variant_1 = 1;
    DeclareTxnV1Content variant_2 = 2;
    DeclareTxnV2Content variant_3 = 3;
    DeclareTxnV3Content variant_4 = 4;
  }
}

message FunctionAbiEntry {
  FunctionAbiType type_ = 1 [json_name = "type"];
  // The function name
  string name = 2 [json_name = "name"];
  TypedParameter inputs = 3 [json_name = "inputs"];
  TypedParameter outputs = 4 [json_name = "outputs"];
  optional FunctionStateMutability state_mutability = 5 [json_name = "stateMutability"];
}

// Declare Contract Transaction V2
message DeclareTxnV2 {
  TxnHash transaction_hash = 1 [json_name = "transaction_hash"];
  DeclareTxnV2Content declare_txn_v2_content = 2;
}

// deploys a new account contract
message DeployAccountTxn {
  oneof value {
    DeployAccountTxnV1 variant_1 = 1;
    DeployAccountTxnV3 variant_2 = 2;
  }
}

// represents a path to the highest non-zero descendant node
message EdgeNode {
  // an integer whose binary representation represents the path from the current node to its highest non-zero descendant (bounded by 2^251)
  Felt path = 1 [json_name = "path"];
  // the length of the path (bounded by 251)
  int64 length = 2 [json_name = "length"];
  // the hash of the unique non-zero maximal-height descendant node
  Felt child = 3 [json_name = "child"];
}

// the execution trace of a declare transaction
message DeclareTxnTrace {
  optional FunctionInvocation validate_invocation = 1 [json_name = "validate_invocation"];
  optional FunctionInvocation fee_transfer_invocation = 2 [json_name = "fee_transfer_invocation"];
  // the state diffs induced by the transaction
  optional StateDiff state_diff = 3 [json_name = "state_diff"];
  // the resources consumed by the transaction, includes both computation and data
  ExecutionResources execution_resources = 4 [json_name = "execution_resources"];
  string type_ = 5 [json_name = "type"];
}

// Pending state update
message PendingStateUpdate {
  // The previous global state root
  Felt old_root = 1 [json_name = "old_root"];
  StateDiff state_diff = 2 [json_name = "state_diff"];
}

message BlockBodyWithTxs {
  // The transactions in this block
  Txn transactions = 1 [json_name = "transactions"];
}

message PendingBlockHeader {
  // The hash of this block's parent
  BlockHash parent_hash = 1 [json_name = "parent_hash"];
  // The time in which the block was created, encoded in Unix time
  int64 timestamp = 2 [json_name = "timestamp"];
  // The Starknet identity of the sequencer submitting this block
  Felt sequencer_address = 3 [json_name = "sequencer_address"];
  // The price of l1 gas in the block
  ResourcePrice l1_gas_price = 4 [json_name = "l1_gas_price"];
  // The price of l2 gas in the block
  ResourcePrice l2_gas_price = 5 [json_name = "l2_gas_price"];
  // The price of l1 data gas in the block
  ResourcePrice l1_data_gas_price = 6 [json_name = "l1_data_gas_price"];
  // specifies whether the data of this block is published via blob data or calldata
  L1DaMode l1_da_mode = 7 [json_name = "l1_da_mode"];
  // Semver of the current Starknet protocol
  string starknet_version = 8 [json_name = "starknet_version"];
}

message DeclareTxnV2Content {
  string type_ = 1 [json_name = "type"];
  // The address of the account contract sending the declaration transaction
  Address sender_address = 2 [json_name = "sender_address"];
  // The hash of the Cairo assembly resulting from the Sierra compilation
  Felt compiled_class_hash = 3 [json_name = "compiled_class_hash"];
  // The maximal fee that can be charged for including the transaction
  Felt max_fee = 4 [json_name = "max_fee"];
  // Version of the transaction scheme
  NumAsHex version = 5 [json_name = "version"];
  Signature signature = 6 [json_name = "signature"];
  Felt nonce = 7 [json_name = "nonce"];
  // The hash of the declared class
  Felt class_hash = 8 [json_name = "class_hash"];
}

// A Starknet event
message Event {
  Address from_address = 1 [json_name = "from_address"];
  EventContent event_content = 2;
}

message EventFilterWithPage {
  EventFilter event_filter = 1;
  ResultPageRequest result_page_request = 2;
}

// initiates a transaction from a given account
message InvokeTxnV3Content {
  string type_ = 1 [json_name = "type"];
  Address sender_address = 2 [json_name = "sender_address"];
  // The data expected by the account's `execute` function (in most usecases, this includes the called contract address and a function selector)
  Felt calldata = 3 [json_name = "calldata"];
  // Version of the transaction scheme
  NumAsHex version = 4 [json_name = "version"];
  Signature signature = 5 [json_name = "signature"];
  Felt nonce = 6 [json_name = "nonce"];
  // resource bounds for the transaction execution
  ResourceBoundsMapping resource_bounds = 7 [json_name = "resource_bounds"];
  // the tip for the transaction
  U64 tip = 8 [json_name = "tip"];
  // data needed to allow the paymaster to pay for the transaction in native tokens
  Felt paymaster_data = 9 [json_name = "paymaster_data"];
  // data needed to deploy the account contract from which this tx will be initiated
  Felt account_deployment_data = 10 [json_name = "account_deployment_data"];
  // The storage domain of the account's nonce (an account has a nonce per DA mode)
  DaMode nonce_data_availability_mode = 11 [json_name = "nonce_data_availability_mode"];
  // The storage domain of the account's balance from which fee will be charged
  DaMode fee_data_availability_mode = 12 [json_name = "fee_data_availability_mode"];
}

// a node in the Merkle-Patricia tree, can be a leaf, binary node, or an edge node
message MerkleNode {
  oneof value {
    BinaryNode variant_1 = 1;
    EdgeNode variant_2 = 2;
  }
}

message StorageProof {
  NodeHashToNodeMapping classes_proof = 1 [json_name = "classes_proof"];
  ContractsProof contracts_proof = 2 [json_name = "contracts_proof"];
  NodeHashToNodeMapping contracts_storage_proofs = 3 [json_name = "contracts_storage_proofs"];
  GlobalRoots global_roots = 4 [json_name = "global_roots"];
}

message SimulatedTransaction {
  TransactionTrace transaction_trace = 1 [json_name = "transaction_trace"];
  FeeEstimate fee_estimation = 2 [json_name = "fee_estimation"];
}

message CommonReceiptProperties {
  // The hash identifying the transaction
  TxnHash transaction_hash = 1 [json_name = "transaction_hash"];
  // The fee that was charged by the sequencer
  FeePayment actual_fee = 2 [json_name = "actual_fee"];
  // finality status of the tx
  TxnFinalityStatus finality_status = 3 [json_name = "finality_status"];
  MsgToL1 messages_sent = 4 [json_name = "messages_sent"];
  // The events emitted as part of this transaction
  Event events = 5 [json_name = "events"];
  // The resources consumed by the transaction
  ExecutionResources execution_resources = 6 [json_name = "execution_resources"];
  ExecutionResult execution_result = 7;
}

// initiates a transaction from a given account
message InvokeTxnV1Content {
  string type_ = 1 [json_name = "type"];
  Address sender_address = 2 [json_name = "sender_address"];
  // The data expected by the account's `execute` function (in most usecases, this includes the called contract address and a function selector)
  Felt calldata = 3 [json_name = "calldata"];
  // The maximal fee that can be charged for including the transaction
  Felt max_fee = 4 [json_name = "max_fee"];
  // Version of the transaction scheme
  NumAsHex version = 5 [json_name = "version"];
  Signature signature = 6 [json_name = "signature"];
  Felt nonce = 7 [json_name = "nonce"];
}

message MsgFromL1 {
  // The address of the L1 contract sending the message
  EthAddress from_address = 1 [json_name = "from_address"];
  // The target L2 address the message is sent to
  Address to_address = 2 [json_name = "to_address"];
  // The selector of the l1_handler in invoke in the target contract
  Felt entry_point_selector = 3 [json_name = "entry_point_selector"];
  // The payload of the message
  Felt payload = 4 [json_name = "payload"];
}

message TxnReceiptWithBlockInfo {
  TxnReceipt txn_receipt = 1;
  ReceiptBlock receipt_block = 2;
}

// Initiate a transaction from an account
message InvokeTxnContent {
  oneof value {
    InvokeTxnV0Content variant_1 = 1;
    InvokeTxnV1Content variant_2 = 2;
    InvokeTxnV3Content variant_3 = 3;
  }
}

message BroadcastedTxn {
  oneof value {
    BroadcastedInvokeTxn variant_1 = 1;
    BroadcastedDeclareTxn variant_2 = 2;
    BroadcastedDeployAccountTxn variant_3 = 3;
  }
}

// The block object
message BlockWithTxs {
  BlockStatus status = 1 [json_name = "status"];
  BlockHeader block_header = 2;
  BlockBodyWithTxs block_body_with_txs = 3;
}

message DeclareTxn {
  oneof value {
    DeclareTxnV0 variant_1 = 1;
    DeclareTxnV1 variant_2 = 2;
    DeclareTxnV2 variant_3 = 3;
    DeclareTxnV3 variant_4 = 4;
  }
}

// Extra information on why trace is not available. Either it wasn't executed yet (RECEIVED), or the transaction failed (REJECTED)
message NoTraceAvailableErrorData {
  TxnStatus status = 1 [json_name = "status"];
}

message ResourceBoundsMapping {
  // The max amount and max price per unit of L1 gas used in this tx
  ResourceBounds l1_gas = 1 [json_name = "l1_gas"];
  // The max amount and max price per unit of L1 blob gas used in this tx
  ResourceBounds l1_data_gas = 2 [json_name = "l1_data_gas"];
  // The max amount and max price per unit of L2 gas used in this tx
  ResourceBounds l2_gas = 3 [json_name = "l2_gas"];
}

message DeployedContractItem {
  // The address of the contract
  Felt address = 1 [json_name = "address"];
  // The hash of the contract code
  Felt class_hash = 2 [json_name = "class_hash"];
}

// A field element. represented by at most 63 hex digits
message Felt {
  // A field element. represented by at most 63 hex digits
  string value = 1;
}

message ContractAbi {
  ContractAbiEntry value = 1;
}

message DeployTxnReceipt {
  CommonReceiptProperties common_receipt_properties = 1;
  string type_ = 2 [json_name = "type"];
  // The address of the deployed contract
  Felt contract_address = 3 [json_name = "contract_address"];
}

message ContractAbiEntry {
  oneof value {
    FunctionAbiEntry variant_1 = 1;
    EventAbiEntry variant_2 = 2;
    StructAbiEntry variant_3 = 3;
  }
}

// an ethereum address represented as 40 hex digits
message EthAddress {
  // an ethereum address represented as 40 hex digits
  string value = 1;
}

message StructMember {
  TypedParameter typed_parameter = 1;
  // offset of this property within the struct
  int64 offset = 2 [json_name = "offset"];
}

message ContractsProof {
  // The nodes in the union of the paths from the contracts tree root to the requested leaves
  NodeHashToNodeMapping nodes = 1 [json_name = "nodes"];
  ContractLeafData contract_leaves_data = 2 [json_name = "contract_leaves_data"];
}

message StateUpdate {
  BlockHash block_hash = 1 [json_name = "block_hash"];
  // The previous global state root
  Felt old_root = 2 [json_name = "old_root"];
  // The new global state root
  Felt new_root = 3 [json_name = "new_root"];
  StateDiff state_diff = 4 [json_name = "state_diff"];
}

// The block's number (its height)
message BlockNumber {
  // The block's number (its height)
  int64 value = 1;
}

message DeclareTxnV3Content {
  string type_ = 1 [json_name = "type"];
  // The address of the account contract sending the declaration transaction
  Address sender_address = 2 [json_name = "sender_address"];
  // The hash of the Cairo assembly resulting from the Sierra compilation
  Felt compiled_class_hash = 3 [json_name = "compiled_class_hash"];
  // Version of the transaction scheme
  NumAsHex version = 4 [json_name = "version"];
  Signature signature = 5 [json_name = "signature"];
  Felt nonce = 6 [json_name = "nonce"];
  // The hash of the declared class
  Felt class_hash = 7 [json_name = "class_hash"];
  // resource bounds for the transaction execution
  ResourceBoundsMapping resource_bounds = 8 [json_name = "resource_bounds"];
  // the tip for the transaction
  U64 tip = 9 [json_name = "tip"];
  // data needed to allow the paymaster to pay for the transaction in native tokens
  Felt paymaster_data = 10 [json_name = "paymaster_data"];
  // data needed to deploy the account contract from which this tx will be initiated
  Felt account_deployment_data = 11 [json_name = "account_deployment_data"];
  // The storage domain of the account's nonce (an account has a nonce per DA mode)
  DaMode nonce_data_availability_mode = 12 [json_name = "nonce_data_availability_mode"];
  // The storage domain of the account's balance from which fee will be charged
  DaMode fee_data_availability_mode = 13 [json_name = "fee_data_availability_mode"];
}

// the execution trace of a deploy account transaction
message DeployAccountTxnTrace {
  optional FunctionInvocation validate_invocation = 1 [json_name = "validate_invocation"];
  // the trace of the __execute__ call or constructor call, depending on the transaction type (none for declare transactions)
  FunctionInvocation constructor_invocation = 2 [json_name = "constructor_invocation"];
  optional FunctionInvocation fee_transfer_invocation = 3 [json_name = "fee_transfer_invocation"];
  // the state diffs induced by the transaction
  optional StateDiff state_diff = 4 [json_name = "state_diff"];
  // the resources consumed by the transaction, includes both computation and data
  ExecutionResources execution_resources = 5 [json_name = "execution_resources"];
  string type_ = 6 [json_name = "type"];
}

// the resources consumed by an inner call (does not account for state diffs since data is squashed across the transaction)
message InnerCallExecutionResources {
  // l1 gas consumed by this transaction, used for l2-->l1 messages and state updates if blobs are not used
  int64 l1_gas = 1 [json_name = "l1_gas"];
  // l2 gas consumed by this transaction, used for computation and calldata
  int64 l2_gas = 2 [json_name = "l2_gas"];
}

// initiates a transaction from a given account
message InvokeTxnV3 {
  TxnHash transaction_hash = 1 [json_name = "transaction_hash"];
  InvokeTxnV3Content invoke_txn_v3_content = 2;
}

// Block hash, number or tag, same as BLOCK_ID, but without 'pending'
message SubscriptionBlockId {
  oneof value {
    Object variant_1 = 1;
    Object variant_2 = 2;
    SubscriptionBlockTag variant_3 = 3;
  }
}

message InvokeTxnReceipt {
  string type_ = 1 [json_name = "type"];
  CommonReceiptProperties common_receipt_properties = 2;
}

// the trace of the __execute__ call or constructor call, depending on the transaction type (none for declare transactions)
message ExecuteInvocation {
  oneof value {
    FunctionInvocation variant_1 = 1;
    RevertedInvocation variant_2 = 2;
  }
}

message ContractClass {
  oneof value {
    SierraContractClass variant_1 = 1;
    DeprecatedContractClass variant_2 = 2;
  }
}

message TypedParameter {
  // The parameter's name
  string name = 1 [json_name = "name"];
  // The parameter's type
  string type_ = 2 [json_name = "type"];
}

// Event information decorated with metadata on where it was emitted / An event emitted as a result of transaction execution
message EmittedEvent {
  // The event information
  Event event = 1;
  // The hash of the block in which the event was emitted
  optional BlockHash block_hash = 2 [json_name = "block_hash"];
  // The number of the block in which the event was emitted
  optional BlockNumber block_number = 3 [json_name = "block_number"];
  // The transaction that emitted the event
  TxnHash transaction_hash = 4 [json_name = "transaction_hash"];
}

message RevertedInvocation {
  // the revert reason for the failed execution
  string revert_reason = 1 [json_name = "revert_reason"];
}

message BlockBodyWithReceipts {
  // The transactions in this block
  TxnWithReceipt transactions = 1 [json_name = "transactions"];
}

// An integer number in hex format (0x...)
message NumAsHex {
  // An integer number in hex format (0x...)
  string value = 1;
}

// The nonce and class hash for each requested contract address, in the order in which they appear in the request. These values are needed to construct the associated leaf node
message ContractLeafData {
  Felt nonce = 1 [json_name = "nonce"];
  Felt class_hash = 2 [json_name = "class_hash"];
  optional Felt storage_root = 3 [json_name = "storage_root"];
}

